:-  :~
  [%owner '~littel-ponnys']
  [%type 'comments']
  [%last-modified '~2018.8.14..00.04.18..4585']
  [%date-created '~2018.8.14..00.04.18..4585']
    ==
;>

Today we planned out a new caching system. We're going to cache individual
build results and only for specific builds; we won't require caching of entire
build trees. Our initial cache will only be for `%call`, `%ride`, `%slim` and
`%slit` schematics.

We will cache up to a certain number of builds, and we will use the clock cache
replacement algorithm. This should be simpler to implement than LRU and also
faster (probably). The standard way to implement an LRU cache relies on O(1)
pointer lookups, which we can't do in Hoon. The best we could do is
O(log(n)). To implement clock, we can use Hoon's built in double ended
`+qeu`...which is also O(log(n)) but with a smaller constant for this algorithm.

This design keeps the cache decoupled from the build/rebuild semantics, which
had been a problem with our previous cache designs. This scheme doesn't cache
higher level builds such as `%walk`, but it should at least cache most of the
expensive schematics which invoke the compiler. None of these cache keys
involve the dependency tracking system at all, which makes the system easier to
reason about.

[Current WIP](https://github.com/urbit/arvo/commit/dcedf1c8d9bc32984a4798e731581c0b1925a47a).

